#!/bin/bash

POSIXLY_CORRECT=yes

gender=""
operators=""
command=""
numberOfCommands=0
files=""
dateAfter=""
dateBefore=""
width=1
header="id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs\n"

print_help() {
    echo -e "\e[1mNAME\e[0m"
    echo "      corona — analyzátor záznamů osob s prokázanou nákazou koronavirem způsobujícím onemocnění COVID-19"
    echo ""

    echo -e "\e[1mUSAGE\e[0m"
    echo "      corona [-h|--help]"
    echo "      corona [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo ""

    echo -e "\e[1mOPTIONS\e[0m"
    echo -e "      \e[1mCOMMAND může být jeden z:\e[0m"
    echo ""

    echo -e "      \e[1minfected\e[0m"
    echo "          — spočítá počet nakažených."
    echo -e "      \e[1mmerge\e[0m"
    echo "          — sloučí několik souborů se záznamy do jednoho, zachovávající původní pořadí 
            (hlavička bude ve výstupu jen jednou)."
    echo -e "      \e[1mgender\e[0m"
    echo "          — vypíše počet nakažených pro jednotlivá pohlaví."
    echo -e "      \e[1mage\e[0m"
    echo "          — vypíše statistiku počtu nakažených osob dle věku (bližší popis je níže)."
    echo -e "      \e[1mdaily\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé dny."
    echo -e "      \e[1mmonthly\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé měsíce."
    echo -e "      \e[1myearly\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé roky."
    echo -e "      \e[1mcountries\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé země nákazy (bez ČR, tj. kódu CZ)."
    echo -e "      \e[1mdistricts\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé okresy."
    echo -e "      \e[1mregions\e[0m"
    echo "          — vypíše statistiku nakažených osob pro jednotlivé kraje."
    echo ""

    echo -e "      \e[1mFILTERS může být kombinace následujících (každý maximálně jednou):\e[0m"
    echo ""

    echo -e "      \e[1m-a DATETIME\e[0m"
    echo "          — after: jsou uvažovány pouze záznamy PO tomto datu (včetně tohoto data). 
            DATETIME je formátu YYYY-MM-DD."
    echo ""
    echo -e "      \e[1m-b DATETIME\e[0m"
    echo "          — before: jsou uvažovány pouze záznamy PŘED tímto datem (včetně tohoto data)."
    echo ""
    echo -e "      \e[1m-g GENDER\e[0m"
    echo "          — jsou uvažovány pouze záznamy nakažených osob daného pohlaví. 
            GENDER může být M (muži) nebo Z (ženy)."
    echo ""
    echo -e "      \e[1m-s [WIDTH]\e[0m" 
    echo "          — u příkazů gender, age, daily, monthly, yearly, countries, districts a regions 
            vypisuje data ne číselně, ale graficky v podobě histogramů. 
            Nepovinný parametr WIDTH nastavuje šířku histogramů, tedy délku nejdelšího řádku, na WIDTH. 
            Tedy, WIDTH musí být kladné celé číslo. 
            Pokud není parametr WIDTH uveden, řídí se šířky řádků požadavky uvedenými níže.
            
            - gender — 100 000
            - age — 10 000
            - daily — 500
            - monthly — 10 000
            - yearly — 100 000
            - countries — 100
            - districts — 1 000
            - regions — 10 000"

    echo ""
    echo -e "      \e[1m-h\e[0m"
    echo "          — vypíše nápovědu s krátkým popisem každého příkazu a přepínače"
}

error(){
   echo "$1" >/dev/stderr
   exit "$2"     
}

valid_gender(){
        if [ "$1" = "M" ] || [ "$1" = "Z" ]
        then
                gender=$1
        else
                error "Špatně zadané pohlaví." 22
        fi
}

date_validator(){
        local date=(${1//-/ })

        regex="^[0-9]{4}-[0-9]{2}-[0-9]{2}$"

        if ! [[ $1 =~ $regex ]]
        then
                error "Zadáno nevalidní datum." 22
        fi


	if [[ ${date[2]} -ge 32 ]]
	then
                error "Zadáno nevalidní datum." 22
	elif [[ ${date[1]} -ge 13 ]]
	then
                error "Zadáno nevalidní datum." 22
	elif [[ ${date[2]} == 31 ]] && [[ ${date[1]} == 04 || ${date[1]} == 06 || ${date[1]} == 09 || ${date[1]} == 11 ]]
	then
                error "Zadáno nevalidní datum." 22
	elif [[ ${date[2]} -ge 30 && ${date[1]} == 02 ]]
	then
                error "Zadáno nevalidní datum." 22
	elif [[ ${date[1]} == 02 && ${date[2]} == 29 ]]
	then
		if ! [[ ( $(expr ${date[0]} % 4) == 0 ) && ( $(expr ${date[0]} % 100) != 0 || $(expr ${date[0]} % 400) == 0 ) ]]
		then
                        error "Zadáno nevalidní datum." 22
		fi
	else
		return 0
	fi
}

integer_validator(){
        local re='^[0-9]*[1-9]+$|^[1-9]+[0-9]*$'
        if ! [[ $1 =~ $re ]] ; 
        then
                return 1        
        fi
        return 0
}

controller(){
        valiAge=" | awk -F, '{
                if (\$3 ~ /^[[:blank:]]*$/) {
                        print \$0 
                } else{
                        if (\$3 ~ /^[0-9]*[0-9]+$|^[1-9]+[0-9]*$/){
                                print \$0
                        }else{
                        print \"Invalid age: \"\$0 | \"cat 1>&2\";
                        }
                }           
        }'"

        valiDate="awk -F, '{
                if (\$2 ~ /^[[:blank:]]*$/) {
                        print \$0 
                } else{
                        if (\$2 ~ /([0-9]{4}-[0-9]{2}-[0-9]{2})/){
                                y=substr(\$2,1,4)+0;
                                m=substr(\$2,6,2)+0;
                                d=substr(\$2,9,2)+0;
                                if ((m == 1 || m == 3 || m == 5 || m == 7 || m == 8|| m == 10 || m == 12)&&(d > 0 && d < 32)){
                                        print \$0
                                }else if ((m==4||m==6||m==9||m==11)&&(d>0&&d<31)){
                                        print \$0
                                }else if (m==2&&(d>0&&d<29)){
                                        print \$0
                                }else if (m==2&&d==29&&((y%4==0&&y%100!=0)||y%400==0)){
                                        print \$0
                                }
                                else{
                                        print \"Invalid date: \"\$0 | \"cat 1>&2\";
                                }
                        }else{
                        print \"Invalid date: \"\$0 | \"cat 1>&2\";
                        }
                }    
                        
                }'"

        genderFilter=""
        if [ "$gender" != "" ]
        then
                genderFilter="|awk -F, -vg=$gender 'BEGIN{OFS=\",\";} {\$4=g; print \$0}'"
        fi

        dateAfterFilter=""
        if [ "$dateAfter" != "" ]
        then
                dateAfterFilter="|awk -F, -vdate=$dateAfter 'BEGIN{OFS=\",\";} {
                        y=substr(\$2,1,4)+0;
                        m=substr(\$2,6,2)+0;
                        d=substr(\$2,9,2)+0;
                        if(y>substr(date,1,4)+0){
                                print \$0;
                        }else if (y==substr(date,1,4)+0 && m>substr(date,6,2)+0){
                                print \$0;
                        }else if (y==substr(date,1,4)+0 && m==substr(date,6,2)+0 && d>=substr(date,9,2)+0){
                                print \$0;
                        }}'"
        fi

        dateBeforeFilter=""
        if [ "$dateBefore" != "" ]
        then
                dateBeforeFilter="|awk -F, -vdate=$dateBefore 'BEGIN{OFS=\",\";} {
                        y=substr(\$2,1,4)+0;
                        m=substr(\$2,6,2)+0;
                        d=substr(\$2,9,2)+0;
                        if(y<substr(date,1,4)+0){
                                print \$0;
                        }else if (y==substr(date,1,4)+0 && m<substr(date,6,2)+0){
                                print \$0;
                        }else if (y==substr(date,1,4)+0 && m==substr(date,6,2)+0 && d<=substr(date,9,2)+0){
                                print \$0;
                        }}'"
        fi

        filters="$genderFilter $dateAfterFilter $dateBeforeFilter"
        case "$command" in
        infected)
                eval "$1" | tail -n +2 | eval "$valiDate $valiAge $filters" |wc -l
                ;;
        gender)
                eval "$1" | tail -n +2 | eval "$valiDate $valiAge $filters" | awk -F, 'BEGIN{
                        A["M"]=0;
                        A["Z"]=0;
                }{A[$4]+=1} END{
                        print "M: " A["M"];
                        print "Z: " A["Z"];         
                        if (A[""])
                                print "None: " A[""];
                        }'
                ;;
        daily)
                eval "$1" | tail -n +2 | eval "$valiDate $valiAge $filters" |awk -F, '{
                        if ($2 ~ /^[[:blank:]]*$/) 
                                d[""]++;
                        else
                                d[$2]++} 
                        END {
                                for (i in d){
                                        if (i!="")
                                                print i": "d[i]
                                }
                                if (d[""]>0)
                                print "None: " d[""]
                        }'| sort  
                ;;
        *)
                echo "id,datum,vek,pohlavi,kraj_nuts_kod,okres_lau_kod,nakaza_v_zahranici,nakaza_zeme_csu_kod,reportovano_khs"
                if [ "$dateBeforeFilter" == "" ] || [ "$dateAfterFilter" == "" ]
                then
                        eval "$1 | tail -n +2 $filters"
                else
                        eval "$1 $valiDate $filters"
                fi
        esac
        
}

while [ "$#" -gt 0 ]; do
        if [[ "$operators" == *"$1"* ]]; then
                error "Nalezen duplicitní operátor." 22
        fi
        
        case "$1" in
                -h|-a|-b|-g|-s)
                        if [ "$numberOfCommands" -gt 0  ] || [ "$files" != "" ]
                        then 
                                error "Operátor nemůže být zadán po příkazu a nebo souborech." 22
                        fi
                        ;;&
                -h)
                        print_help
                        exit 0;
                        ;;
                -a)
                        operators="$operators $1"
                        date_validator "$2"                  
                        dateAfter=$2
                        shift
                        shift
                        ;;
                -b)
                        operators="$operators $1"
                        date_validator "$2"                  
                        dateBefore=$2
                        shift
                        shift
                        ;;
                -g)
                        operators="$operators $1"
                        valid_gender "$2"
                        shift
                        shift
                        ;;
                -s)
                        operators="$operators $1"
                        if integer_validator $2;
                        then 
                                width=$2
                                shift
                        else
                                width=0
                        fi
                        shift
                        ;;

                infected|merge|gender|age|daily|monthly|yearly|countries|districts|regions) 
                        ((numberOfCommands++))
                        if [ "$numberOfCommands" -gt 1 ]
                        then
                                error "Může být zadán pouze 1 příkaz." 22
                        elif [ "$files" != "" ]
                        then
                                error "Příkaz nemůže být zadán po souboru." 22
                        fi
                        command=$1
                        shift
                        ;;
                
                *)
                        files="$files $1"
                        shift
                        ;;
        esac

done

source=""

if [ "$files" == "" ]
then
        source="cat | tr -d \"\r\""
        controller "$source"

else
        increment=0
        
        for file in $files
        do
                if [ -f "$file" ]; then
                        if [ $increment -eq 1 ]
                        then
                                source="$source ; "
                        elif [ $increment -gt 1 ]
                        then
                                source="$source | tail -n +2 ; "
                        fi
                        case $file in 
                        *.gz)  
                                source="$source gzip -cd $file | tr -d \"\r\""
                                ;;     
                        *.bz2)  
                                source="$source bzip2 -cd $file | tr -d \"\r\""
                                ;;
                        *)
                                source="$source cat $file | tr -d \"\r\""
                                ;;      
                        esac
                        ((increment=increment+1))
                        
                else 
                        error "Neznamy nazev souboru" 22
                fi
        done
        if [ $increment -gt 1 ]
        then
                source="$source | tail -n +2"
        fi
        controller "$source"
fi 
